import pool from "../config/db.js";

import Patient from "../models/patient.model.js";
import Address from "../models/address.model.js";
import Care from "../models/care.model.js";
import Guardian from "../models/guardian.model.js";
import RetirementHome from "../models/retirement_home.model.js";

const getAll = async (req, res, next) => {
  try {
    const [response] = await Patient.findAllOrderByCareStatus();

    if (response.length) {
      return res.status(200).json({
        message: "Patients récupérés.",
        response,
      });
    }
    return res.status(400).json({
      message: "Aucun patients récupérés.",
    });
  } catch (error) {
    next(error);
  }
};

const getOne = async (req, res, next) => {
  const { id } = req.params;

  try {
    const [[patient]] = await Patient.getOneByID(id);
    const [care] = await Care.getAllForPatient(id);

    if (!patient) {
      res.status(400).json({
        message: "Le patient recherché n'a pas été trouvé.",
      });
      return;
    }

    if (!care) {
      res.status(400).json({
        message: "Aucun soins trouvés pour ce patient.",
        response: patient,
      });
      return;
    }

    const response = {
      patient,
      care,
    };

    res.status(200).json({
      message: "Patient trouvé avec succes.",
      response,
    });
  } catch (error) {
    console.log("error", error);
    next(error);
  }
};

const add = async (req, res, next) => {
  // validation des données + refactorisée
  // validation des champs
  // const errors = validationResult(req);

  const { patient_detail, guardian_detail, guardian_address, retirement_home } =
    req.body;

  let connection = null;
  try {
    connection = await pool.getConnection();
    await connection.beginTransaction();

    const [[existingPatient]] = await Patient.findPatient(patient_detail);

    if (existingPatient)
      throw new Error({ message: "Le patient existe déjà." });

    let [[existingGuardian]] = await Guardian.findGuardian(guardian_detail);

    if (existingGuardian) {
      const [address] = await Address.insertAddress(connection, {
        ...guardian_address,
        floor: guardian_address.floor || null,
        complements: guardian_address.complements || null,
      });

      if (!address.insertId)
        throw new Error({
          message: "Erreur lors de l'ajout de l'adresse du tuteur.",
        });

      const [guardian] = await Guardian.insert(connection, {
        ...guardian_detail,
        address_id: response_address.insertId,
      });

      if (!guardian.insertId)
        throw new Error({ message: "Erreur lors de l'ajout du tuteur." });

      existingGuardian = { id: guardian.insertId };
    }

    let retirementHomeID = null;
    if (retirement_home) {
      const [[existingRh]] = await RetirementHome.findRh(retirement_home);
      if (!existingRh)
        throw new Error({ message: "EHPAD manquante ou inexistante." });
      retirementHomeID = existingRh.id;
    }

    await Patient.insert(connection, {
      ...patient_detail,
      user_id: req.user.id,
      guardian_id: existingGuardian.id,
      retirement_home_id: retirementHomeID,
    });

    await connection.commit();
    res.status(201).json({ message: "Patient ajouté." });
  } catch (error) {
    if (connection) await connection.rollback();
    console.log(error.message);
    next(error);
  } finally {
    if (connection) connection.release();
  }
};

const remove = async (req, res, next) => {
  try {
    const [response] = await Patient.delete(req.params.id);
    if (response.affectedRows) {
      res.json({ message: "Patient supprimé." });
      return;
    }
    res.status(400).json({
      message: "Ce patient n'existe pas.",
    });
  } catch (error) {
    next(error);
  }
};

export { getAll, getOne, add, remove };
